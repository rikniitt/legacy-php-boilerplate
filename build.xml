<?xml version="1.0" encoding="UTF-8"?>
<project name="your-fresh-wep-app" default="build">

    <property name="basedir"  value="." override="true" />
    <resolvepath propertyName="absolutebasedir" file="${basedir}" />

    <property name="vendorbin" value="${absolutebasedir}/vendor/bin" />
    <property name="srcdir" value="${absolutebasedir}/src" />
    <property name="testsdir" value="${absolutebasedir}/tests" />
    <property name="builddir" value="${absolutebasedir}/build" />
    <property name="publicdir" value="${absolutebasedir}/public" />

    <!-- Load config file -->
    <property file="${absolutebasedir}/config/config.file" />

    <!-- Default target: -->
    <target name="build" description="Build project.">
        <echo msg="Hey there. No one has not setup any build magic ... :(" level="error" />
    </target>

    <!-- Main targets: -->
    <target name="archive-logs" description="Archives all log files older than this month.">
        <!-- Uses custom adhoc task defined below. -->
        <log-archive dir="${absolutebasedir}/logs" />
    </target>

    <target name="assets-publish" description="Publish assets installed via composer.">

        <echo msg="Cleaning up ${publicdir}/assets/vendor directory." />
        <delete dir="${publicdir}/assets/vendor" includeemptydirs="true" quiet="true" />
        <mkdir dir="${publicdir}/assets/vendor" />

        <echo msg="Publishing jquery." />

        <mkdir dir="${publicdir}/assets/vendor/jquery" />
        <copy todir="${publicdir}/assets/vendor/jquery/js">
            <fileset dir="${absolutebasedir}/vendor/components/jquery" />
        </copy>

        <echo msg="Publishing twitter bootstrap." />
        <mkdir dir="${publicdir}/assets/vendor/bootstrap" />
        <copy todir="${publicdir}/assets/vendor/bootstrap/css">
            <fileset dir="${absolutebasedir}/vendor/twbs/bootstrap/dist/css" />
        </copy>
        <copy todir="${publicdir}/assets/vendor/bootstrap/fonts">
            <fileset dir="${absolutebasedir}/vendor/twbs/bootstrap/dist/fonts" />
        </copy>
        <copy todir="${publicdir}/assets/vendor/bootstrap/js">
            <fileset dir="${absolutebasedir}/vendor/twbs/bootstrap/dist/js" />
        </copy>

    </target>

    <target name="check-style" description="Find coding standard violations using PHP CodeSniffer.">
        <phpcodesniffer
            standard="${absolutebasedir}/phpcs.xml"
            format="full"
            showSniffs="true"
            haltonerror="true">
            <fileset dir="${srcdir}">
                <include name="**/*.php"/>
            </fileset>
            <fileset dir="${testsdir}">
                <include name="**/*.php"/>
            </fileset>
        </phpcodesniffer>
    </target>

    <target name="compress" description="Compress source files to zip archive." depends="prepare">
        <echo msg="Compressing project to zip archive." />
        <echo msg="This takes a while..." />

        <tstamp>
            <format property="DATETIME" pattern="%Y%m%d_%H%M%S" />
        </tstamp>
        <property name="buildpackage"  value="${builddir}/${DATETIME}_${phing.project.name}_build.zip" />

        <zip destfile="${buildpackage}">
            <fileset dir=".">
                <include name="config/**/**" />
                <exclude name="config/config.file" />
                <include name="logs/**/**" />
                <exclude name="**/*.log"/>
                <exclude name="**/*.zip"/>
                <include name="public/**/**" />
                <include name="src/**/**" />
                <include name="vendor/**/**" />
                <include name="views/**/**" />
            </fileset>
        </zip>
    </target>

    <target name="install" depends="create-local-config, assets-publish" description="Install project." />

    <target name="lint" description="Perform syntax check of sourcecode files with php lint.">
        <phplint haltonfailure="true" deprecatedAsError="true">
            <fileset dir="${srcdir}">
                <include name="**/*.php"/>
            </fileset>
            <fileset dir="${testsdir}">
                <include name="**/*.php"/>
            </fileset>
        </phplint>
    </target>

    <target name="migration-create" description="Create new empty migration file.">
        <propertyprompt propertyName="migrationname" defaultValue="give_a_meaningful_name_in_snake_case" promptText="Enter name for the migration" />
        <tstamp>
            <format property="DATETIME" pattern="%Y%m%d_%H%M%S" />
            <format property="CREATETIME" pattern="%m/%d/%Y %H:%M %p" />
        </tstamp>
        <touch file="${absolutebasedir}/config/migrations/${DATETIME}_${migrationname}.sql" datetime="${CREATETIME}" />
    </target>

    <target name="migration-run" description="Run all new migrations.">
        <tstamp>
            <format property="TIMESTAMP" pattern="%s"  />
        </tstamp>

        <property name="lastmigrationrun" value="0" />
        <property file="${absolutebasedir}/config/migrations/.lastmigrationrun" override="true"/>

        <apply executable="mysql" parallel="false" passthru="true" checkreturn="false">
            <arg line="-h${DB_HOST}" />
            <arg line="-u${DB_USER}" />
            <arg line="-p${DB_PASS}" />
            <arg line="${DB_NAME}" />
            <arg value="&lt;" />
            <srcfile />
            <fileset dir="${absolutebasedir}/config/migrations">
                <date seconds="${lastmigrationrun}" when="after"/>
                <include name="*.sql" />
            </fileset>
        </apply>

        <echo msg="lastmigrationrun=${TIMESTAMP}" file="${absolutebasedir}/config/migrations/.lastmigrationrun" append="false" />
    </target>

    <target name="test" description="Run all unit tests with PHPUnit.">
        <phpunit
            haltonfailure="true"
            haltonerror="true"
            configuration="${absolutebasedir}/phpunit.xml">
            <formatter type="plain" usefile="false"/>
            <batchtest>
                <fileset dir="${testsdir}/Unit">
                    <include name="**/*Test*.php"/>
                </fileset>
            </batchtest>
        </phpunit>
    </target>

    <!-- Subtargets: -->
    <target name="clean">
        <delete dir="${builddir}" includeemptydirs="true" quiet="true" />
    </target>

    <target name="create-local-config">
        <copy file="${absolutebasedir}/config/config.file.example" tofile="${absolutebasedir}/config/config.file" />
    </target>

    <target name="prepare" depends="clean">
        <mkdir dir="${builddir}" />
    </target>

    <!-- Adhoc tasks: -->
    <adhoc-task name="log-archive"><![CDATA[
        class LogArchive extends Task {
            private $dir = './logs';
            private $month = null;

            public function main() {
                if ($this->month !== null) {
                    $logFiles = glob($this->dir . '/*' . $this->month . '*.log');
                    $this->zipFiles($this->month, $logFiles);
                } else {
                    $exclude = date('Ym');
                    $months = array();
                    foreach (glob($this->dir . '/*.log') as $f) {
                        preg_match('/([0-9]{6})/', basename($f), $captured);
                        if (count($captured) === 2
                            && $captured[1] !== $exclude
                            && !in_array($captured[1], $months))
                            $months[] = $captured[1];
                    }
                    foreach ($months as $m) {
                        $logFiles = glob($this->dir . '/*' . $m . '*.log');
                        $this->zipFiles($m, $logFiles);
                    }
                }
            }

            private function zipFiles($month, $logFiles) {
                $zipFile = $this->dir . '/' . $month . '_archive.zip';
                $this->log("Compressing logs from {$this->dir} and $month to $zipFile");
                if (count($logFiles) === 0) {
                    $this->log(" ... no log files found.");
                    return;
                }
                $zip = new ZipArchive();
                if (!$zip->open($zipFile, ZIPARCHIVE::CREATE)) {
                    $this->error("Can\'t create archive file $zipFile!");
                    return;
                }
                foreach ($logFiles as $f) {
                    $this->log("Adding file $f");
                    $zip->addFile($f, basename($f));
                }
                $zip->close();
                foreach ($logFiles as $f) {
                    $this->log("Removing file $f");
                    unlink($f);
                }
            }

            public function setDir($dir) { $this->dir = $dir; }
            public function setMonth($month) { $this->month = $month; }
        }
    ]]></adhoc-task>
</project>
