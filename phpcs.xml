<?xml version="1.0"?>
<ruleset>

    <!-- Created with http://edorian.github.io/php-coding-standard-generator/#phpcs -->
    <description>Legacy PHP coding standard.</description>

    <!-- No unused function parameters are allowed. -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter" />

    <!-- No unnecessary overridden methods, that simply call their parent, are allowed. -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

    <!-- Inline control structures like 'if($a) continue;' are not allowed -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- Reports cases where a byte order mark is found in any PHP file to avoid application failures. -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- Line endings must be $eolChar. Defaults to making sure that everything has UNIX line endings.-->
    <rule ref="Generic.Files.LineEndings"/>

    <!-- Lines should not longer than $lineLimit (warning) and must not be longer than $absoluteLineLimit (error). -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="100"/>
            <property name="absoluteLineLimit" value="120"/>
        </properties>
    </rule>

    <!-- There must be only on statement per line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- Function declarations must follow the "BSD/Allman style" -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>

    <!-- Disallows usage of PHP 4 style constructors -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>

    <!-- Constants must be uppercase. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- Ensures camel case function naming and that only PHP core functions have a double underscore. -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>

    <!-- Disallows the use of any deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Makes sure that shorthand PHP open tags are not used. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>

    <!-- Disallows the use of alias functions that are kept in PHP for compatibility with older versions. -->
    <rule ref="Generic.PHP.ForbiddenFunctions"/>

    <!-- The constants 'true', 'false' or 'null' must be written in lowercase. -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- Disallows usage of the @ operator. -->
    <rule ref="Generic.PHP.NoSilencedErrors"/>

    <!-- Spaces, not tabs, must be used for indentation. -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- Checks that control structures are structured correctly and their content is indented correctly. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>

    <!-- Classes must have their opening brace on a new line  -->
    <rule ref="PEAR.Classes.ClassDeclaration"/>

    <!-- Control structures follow the "Kernighan/Ritchie style". -->
    <rule ref="PEAR.ControlStructures.ControlSignature"/>

    <!-- Enforces function call signatures "foo($a, $b, $c)" style reporting all other whitespaces. -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <!-- Do not enforce multi-line function call signature -->
        <exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket" />
        <exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine" />
    </rule>

    <!-- Check that the class declaration adheres to all PSR2 rules. -->
    <rule ref="PSR2.Classes.ClassDeclaration">
        <!-- Squiz.WhiteSpace.FunctionSpacing == 1 -->
        <exclude name="PSR2.Classes.ClassDeclaration.CloseBraceAfterBody" />
        <!-- Duplicate. See (PEAR.Classes.ClassDeclaration.OpenBraceNewLine & SpaceBeforeBrace) -->
        <exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNewLine" />
        <exclude name="PSR2.Classes.ClassDeclaration.SpaceBeforeBrace" />
    </rule>

    <!-- Check that the property declaration adheres to all PSR2 rules. -->
    <rule ref="PSR2.Classes.PropertyDeclaration"/>

    <!-- Checks that control structures have PSR2 style spacing around brackets (no spaces after opening and before closing) -->
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/>

    <!-- Verifies that there are no else if statements. Elseif should be used instead. -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>

    <!-- Ensures that switch statements are defined according to PSR2. -->
    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>

    <!-- Ensures the file ends with a newline character. -->
    <rule ref="PSR2.Files.EndFileNewline"/>

    <!-- Check that the method declaration adheres to all PSR2 rules. -->
    <rule ref="PSR2.Methods.MethodDeclaration"/>

    <!-- There must be one blank line after the namespace declaration. -->
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>

    <!-- Ensures USE blocks are declared according to PSR2. -->
    <rule ref="PSR2.Namespaces.UseDeclaration"/>

    <!-- Try to ensure that there is no commented out code (35%) -->
    <rule ref="Squiz.PHP.CommentedOutCode">
        <properties>
            <property name="maxPercentage" value="35"/>
        </properties>
    </rule>

    <!-- Ensures no size-based functions are used in loop conditions to avoid unneccarry function calls. -->
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>

    <!-- Warns about usage for the eval() function. -->
    <rule ref="Squiz.PHP.Eval"/>

    <!-- Ensures all calls to builtin PHP functions are lowercase. -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>

    <!-- Warns about code that can never been executed. -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- Ensures that class members have scope modifiers. -->
    <rule ref="Squiz.Scope.MemberVarScope"/>

    <!-- Ensures that methods have scope modifiers. -->
    <rule ref="Squiz.Scope.MethodScope"/>

    <!-- Disallow double quotes on string literals. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>

    <!-- Ensures that $this is not used in static methods to avoid runtime errors. -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!-- Ensure cast statements dont contain whitespace. -->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <!-- Ensures that control structures have a certain style of spacing around brackets. -->
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>

    <!-- Checks that there are no blank lines after a functions opening brace and that opening braces are on the new line.-->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- Checks the separation between methods in a class or interface. -->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"/>
        </properties>
    </rule>

    <!-- Ensures all language constructs (without brackets) contain a single space between themselves and their content. -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Ensures that there is one space before and after a logical operator. -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <!-- Ensures that operators have one space surrounding them. -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>

    <!-- Ensures that the closing braces of scopes are on a new line and indented correctly. -->
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>

    <!-- Ensure there is a single space after scope keywords. -->
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <!-- Ensures that there is no whitespace before a semicolon. -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- Checks that no whitespace proceeds the first content of the file, exists after the last content of the file, resides after content on any line, or are two empty lines in functions. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

    <!-- Files must not have closing tags to avoid whitespace issues. -->
    <rule ref="Zend.Files.ClosingTag"/>

    <!--Variables have to be camel case and should not contain numbers. -->
    <rule ref="Zend.NamingConventions.ValidVariableName"/>
    <!-- No underscores indicating visibility -->
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

</ruleset>
